
Solutions to the MTH103 Midterm on 2012-09-27-Thu, 0830-1000

(1)
>>> s = 'Hello'
>>> s[0] = 'J'
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'str' object does not support item assignment
>>> L = ['H', 'e', 'l', 'l', 'o']
>>> L[0] = 'J'
>>> s == 'Jello' and L == ['J', 'e', 'l', 'l', 'o'] # (a)
False
>>> s == 'Hello' and L == ['J', 'e', 'l', 'l', 'o'] # (b)
True
>>> s == 'Jello' and L == ['H', 'e', 'l', 'l', 'o'] # (c)
False
>>> s == 'Hello' and L == ['H', 'e', 'l', 'l', 'o'] # (d)
False

(2)
>>> True and not False        # (a)
True
>>> True or True and False    # (b)
True
>>> not True or not False     # (c)
True
>>> True and not 0            # (d)
True
>>> 52 < 52.3                 # (e)
True
>>> 1 + 52 < 52.3             # (f)
False
>>>

(3)
>>> def f(n):
...     for i in range(n):
...         print (n-i)*' ' + i*'T'
...
>>> f(10)

         T
        TT
       TTT
      TTTT
     TTTTT
    TTTTTT
   TTTTTTT
  TTTTTTTT
 TTTTTTTTT
>>>

(4)

(a)

1
4
9
16
25
36
49
64
81
100

(b)

1
2
3
4
5
6
7
8
9
10
385

(5)
>>> s = "spam"
>>> t = "ni!"
>>> "The Knights who say, " + t    # (a)
'The Knights who say, ni!'
>>> 3 * s + 2 * t                  # (b)
'spamspamspamni!ni!'
>>> s[1]                           # (c)
'p'
>>> s[1:3]                         # (d)
'pa'
>>> s[2] + t[:2]                   # (e)
'ani'
>>> s + t[-1]                      # (f)
'spam!'
>>>

(6)

def first(word):
    return word[0]

def last(word):
    return word[-1]

def middle(word):
    return word[1:-1]

def is_palindrome(s):
    if type(s) != str:
        return False
    if len(s) <= 1:
        return True
    return first(s) == last(s) and is_palindrome(middle(s))

(7) Both of the following are correct. The subtlety is with the index
i and the arguments to range.

def cumulative_sum(l):
    output = []
    for i in range(1,len(l)+1):
        output.append(sum(l[:i]))
    return output

def cumulative_sum(l):
    output = []
    for i in range(len(l)):
        output.append(sum(l[:i+1]))
    return output

(8)

def remove_duplicates(l):
    seen = []
    for x in l:
        if x not in seen:
            seen.append(x)
    return seen

def union(a,b):
    return remove_duplicates(a + b)
